<template lang="pug">
div.layout(draggable="{{isActive}}", data-id="{{layout.id}}", class="{{componentClass}}", style="{{componentStyle}}", on-click="activeLayout($event)", on-dragstart="getPosition($event, axis)", on-dragend="setPosition($event, axis)", on-drag="previewPosition($event, axis)")
  .helper
    .resizer
      div(s-for="resizer in settings.resizers", draggable="{{isActive}}", class="rs-{{resizer}}", on-dragstart="getSize($event, axis, resizer)", on-drag="previewSize($event, axis, resizer)", on-dragend="setSize($event, axis, resizer)")
    .wrapper
      sr-layout(s-if="layout.type === 0", s-for="item, index in layout.children", layout="{{item}}", path="{{path}}.children[{{index}}]")
</template>

<script>
import {store, connect} from 'san-store'
import kebab from 'kebab-case'
import Layout from '@/components/pc-editor/Layout.san'
import settings from '@/config/quick-set.js'

const movingAttrs = ['left', 'right', 'bottom', 'top']
const sizingAttrs = [...movingAttrs, 'width', 'height']
const axisInfo = movingAttrs.reduce((obj, key) => {
  obj[key] = {
    alias: key[0],
    ratio: [+(key === 'left') || -(key === 'right'), +(key === 'top') || -(key === 'bottom')]
  }
  return obj
}, {})

const mapStates = {
  activeLayout: 'pc.activeLayout'
}

export default connect.san(mapStates)({
  components: {
    'sr-layout': 'self'
  },
  initData () {
    return {
      settings
    }
  },
  activeLayout (e) {
    e.stopPropagation()
    store.dispatch('activeLayout', this.data.get('path'))
  },
  getPosition (e, axis) {
    e.stopPropagation()
    const {movingStates} = this
    const node = e.target
    // e.dataTransfer.setDragImage('', 0, 0)
    const currentStyle = getComputedStyle(node)
    sizingAttrs.forEach(key => {
      movingStates[key] = parseInt(currentStyle[key], 10) || 0
    })

    movingStates.originX = axis.l ? movingStates.left : movingStates.right
    movingStates.originY = axis.t ? movingStates.top : movingStates.bottom
    movingStates.offsetX = e.pageX
    movingStates.offsetY = e.pageY
    
    movingStates.target = node
  },
  setPosition (e, axis) {
    e.stopPropagation()
    if (!e.pageX || !e.pageY) {
      return
    }
    const {movingStates} = this
    const target = movingStates.target
    movingAttrs.forEach(key => {
      const value = target.style[key]
      store.dispatch('updateLayoutStyle', {
        key,
        value
      })
    })
  },
  previewPosition (e, axis) {
    e.stopPropagation()
    if (!e.pageX || !e.pageY) {
      return
    }
    const {movingStates} = this
    const {target, originX, originY, offsetX, offsetY} = movingStates
    const unit = this.data.get('layout').unit.pos
    const parentStyle = getComputedStyle(target.parentNode)

    movingAttrs.forEach(key => {
      const info = axisInfo[key]
      const ratio = info.ratio[0] || info.ratio[1]
      const tag = info.ratio[0] ? 'X' : 'Y'
      const dir = info.ratio[0] ? 'width' : 'height'
      target.style[key] = axis[info.alias] && (unit === '%'
        ? (movingStates['origin' + tag] + ratio * e['page' + tag] - ratio * movingStates['offset' + tag]) / parseInt(parentStyle[dir]) * 100 + unit
        : movingStates['origin' + tag] + ratio * e['page' + tag] - ratio * movingStates['offset' + tag] + unit)
    })
  },
  getSize (e, axis, resizer) {
    e.stopPropagation()
    const {sizingStates} = this
    const node = e.target.parentNode.parentNode.parentNode
    // e.dataTransfer.setDragImage('', 0, 0)
    const currentStyle = getComputedStyle(node)
    sizingAttrs.forEach(key => {
      sizingStates[key] = parseInt(currentStyle[key], 10) || 0
    })

    sizingStates.originX = axis.l ? sizingStates.left : sizingStates.right
    sizingStates.originY = axis.t ? sizingStates.top : sizingStates.bottom
    sizingStates.offsetX = e.pageX
    sizingStates.offsetY = e.pageY
    
    sizingStates.target = node
  },
  setSize (e, axis, resizer) {
    e.stopPropagation()
    if (!e.pageX || !e.pageY) {
      return
    }
    const {sizingStates} = this
    const target = sizingStates.target

    sizingAttrs.forEach(key => {
      store.dispatch('updateLayoutStyle', {
        key,
        value: (axis[key[0]] || key === 'width' || key === 'height') && target.style[key]
      })
    })
  },
  previewSize (e, axis, resizer) {
    e.stopPropagation()
    if (!e.pageX || !e.pageY) {
      return
    }
    const {sizingStates} = this
    // const unitPos = this.data.get('layout').unit.pos
    // const unitSize = this.data.get('layout').unit.pos
    const target = sizingStates.target
    // const parentStyle = getComputedStyle(target.parentNode)

    movingAttrs.forEach(key => {
      const info = axisInfo[key]
      const ratio = info.ratio[0] || info.ratio[1]
      const tag = info.ratio[0] ? 'X' : 'Y'
      const dir = info.ratio[0] ? 'width' : 'height'
      if (~resizer.indexOf(info.alias)) {
        target.style[dir] = sizingStates[dir] - ratio * e['page' + tag] + ratio * sizingStates['offset' + tag] + 'px'
        if (axis[info.alias]) {
          target.style[key] = sizingStates['origin' + tag] + ratio * e['page' + tag] - ratio * sizingStates['offset' + tag] + 'px'
        }
      }
    })
  },
  computed: {
    isActive () {
      return this.data.get('activeLayout') === this.data.get('path')
    },
    componentClass () {
      return this.data.get('isActive') ? 'active' : ''
    },
    componentStyle () {
      const style = this.data.get('layout.style') || {}
      let ret = ''
      for (const key in style) {
        ret += `${kebab(key)}: ${style[key]};`
      }
      ret += this.data.get('layout.hidden') ? 'visibility: hidden;' : ''
      return ret
    },
    axis () {
      const str = this.data.get('layout').axis || 'tl'
      return str.split('').reduce((obj, key) => {
        obj[key] = true
        return obj
      }, {})
    }
  },
  attached () {
    this.movingStates = {}
    this.sizingStates = {}
  }
})
</script>
